<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
        }

        .navbar {
            background: white;
            padding: 1rem 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #8b5cf6;
        }

        .search-box {
            display: flex;
            align-items: center;
            background: #f1f5f9;
            border-radius: 8px;
            padding: 0.5rem;
            gap: 0.5rem;
        }

        .search-box input {
            border: none;
            background: none;
            outline: none;
            width: 200px;
        }

        .search-dropdown {
            border: none;
            background: none;
            outline: none;
            padding: 0.25rem;
            border-radius: 4px;
        }

        .search-btn {
            background: #8b5cf6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
        }

        .logout-btn {
            text-decoration: none;
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
        }

        .home-btn {
            text-decoration: none;
            background: green;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
        }

        .container {
            display: flex;
            min-height: calc(100vh - 80px);
        }

        .sidebar {
            width: 250px;
            background: white;
            padding: 2rem 1rem;
            box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);
        }

        .nav-item {
            padding: 1rem;
            margin: 0.5rem 0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .nav-item:hover,
        .nav-item.active {
            background: #8b5cf6;
            color: white;
        }

        .content {
            flex: 1;
            padding: 2rem;
            overflow-x: auto;
        }

        .cards-container {
            overflow-x: auto;
            margin-bottom: 2rem;
            padding-bottom: 0.5rem;
        }

        .cards {
            display: flex;
            gap: 1.5rem;
            min-width: max-content;
        }

        .card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            min-width: 200px;
            flex-shrink: 0;
        }

        .card h3 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .services {
            color: #8b5cf6;
        }

        .bookings {
            color: #10b981;
        }

        .accounts {
            color: #f59e0b;
        }

        .table-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .new-btn {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .new-btn:hover {
            background: #059669;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            min-width: 600px;
        }

        th,
        td {
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem;
            white-space: normal;
            /* allow wrapping */
            word-wrap: break-word;
            /* break long words if needed */
        }

        .action-tr,
        .action-td,
        .action-th {
            min-width: 250px;
        }

        th {
            background: #f8fafc;
            font-weight: 600;
        }

        @media (max-width: 1024px) {
            .container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                display: flex;
                justify-content: space-around;
                padding: 1rem;
            }

            .nav-item {
                margin: 0 0.5rem;
                flex: 1;
                text-align: center;
            }

            .content {
                padding: 1rem;
            }
        }

        @media (max-width: 768px) {
            .navbar {
                flex-direction: column;
                gap: 1rem;
            }

            .search-box {
                width: 100%;
            }

            .search-box input {
                width: 100%;
            }

            .sidebar {
                flex-direction: column;
            }

            .nav-item {
                margin: 0.25rem 0;
            }

            .cards {
                grid-template-columns: 1fr;
            }

            .content {
                padding: 0.5rem;
            }

            th,
            td {
                padding: 0.5rem;
                font-size: 0.875rem;
            }
        }

        @media (max-width: 480px) {
            .navbar {
                padding: 1rem;
            }

            .logo {
                font-size: 1.25rem;
            }

            .card {
                padding: 1rem;
            }

            .card h3 {
                font-size: 1.5rem;
            }

            .table-container {
                padding: 0.5rem;
            }

            th,
            td {
                padding: 0.25rem;
                font-size: 0.75rem;
            }
        }
    </style>
</head>

<body>
    <nav class="navbar">
        <div class="logo">Admin Dashboard</div>
        <div class="search-box">
            <select id="searchDropdown" class="search-dropdown">
                <option value="">Select Field</option>
            </select>
            <input type="text" id="searchInput" placeholder="Search bookings..." oninput="performSearch()">
            <button class="search-btn" onclick="clearSearch()">Clear</button>
        </div>
        <a href="/" class="home-btn">Home</a>
        <a href="/logout" class="logout-btn">Logout</a>
    </nav>

    <div class="container">
        <div class="sidebar">
            <div class="nav-item" onclick="showSection('services')">ðŸ“‹ Services</div>
            <div class="nav-item active" onclick="showSection('bookings')">ðŸ“… Bookings</div>
            <div class="nav-item" onclick="showSection('accounts')">ðŸ‘¤ Accounts</div>
        </div>

        <div class="content">
            <div class="cards-container">
                <div class="cards">
                    <div class="card">
                        <h3 class="accounts" id="accounts">0</h3>
                        <p>User Accounts</p>
                    </div>
                    <div class="card">
                        <h3 class="services" id="services">0</h3>
                        <p>Total Services</p>
                    </div>
                    <div class="card">
                        <h3 class="bookings" id="bookings">0</h3>
                        <p>Active Bookings</p>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h2 id="tableTitle">Bookings Management</h2>
                    <button class="new-btn" id="newBtn" onclick="addNew()">+ New Booking</button>
                </div>
                <table id="dataTable">
                    <thead id="tableHead"></thead>
                    <tbody id="tableBody"></tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        const data = {
            services: {
                title: 'Services List',
                buttonText: '+ New Service',
                searchPlaceholder: 'Search services...',
                searchFields: [
                    { value: '', text: 'Select Field' },
                    { value: '0', text: 'Service ID' },
                    { value: '1', text: 'Short Name' },
                    { value: '2', text: 'Type' },
                    { value: '3', text: 'Price' },
                    { value: '4', text: 'Amount' }
                ],
                headers: ['Service ID', 'Shortname', 'Fullname', 'Description', 'Price', 'Amount', 'AvailableFrom', 'Type'],
                rows: [
                    ['2', 'Gurage Room', 'Gurage Single Bed Room', 'Already have an account? Sign in', '100', '1', '2025-08-14', 'Room']
                ]
            },
            bookings: {
                title: 'Bookings Management',
                buttonText: '+ New Booking',
                searchPlaceholder: 'Search bookings...',
                searchFields: [
                    { value: '', text: 'All Fields' },
                    { value: '0', text: 'Booking ID' },
                    { value: '1', text: 'Patient Name' },
                    { value: '2', text: 'Service' },
                    { value: '3', text: 'Date' },
                    { value: '4', text: 'Status' }
                ],
                headers: ['Booking ID', 'Patient', 'Service', 'Date', 'Status'],
                rows: [
                    ['BK001', 'John Smith', 'General Consultation', '2025-08-15', 'Confirmed'],
                    ['BK002', 'Sarah Johnson', 'Blood Test', '2025-08-16', 'Pending'],
                    ['BK003', 'Mike Davis', 'X-Ray Scan', '2025-08-17', 'Confirmed'],
                    ['BK004', 'Lisa Brown', 'Cardiology Checkup', '2025-08-18', 'Completed'],
                    ['BK005', 'Tom Wilson', 'Dental Cleaning', '2025-08-19', 'Confirmed'],
                    ['BK006', 'Emma White', 'MRI Scan', '2025-08-20', 'Pending'],
                    ['BK007', 'James Miller', 'Physical Therapy', '2025-08-21', 'Confirmed'],
                    ['BK008', 'Maria Garcia', 'Surgery Consultation', '2025-08-22', 'Pending']
                ]
            },
            accounts: {
                title: 'Accounts List',
                buttonText: '+ New Account',
                searchPlaceholder: 'Search accounts...',
                searchFields: [
                    { value: '', text: 'Select Field' },
                    { value: '0', text: 'Account ID' },
                    { value: '1', text: 'FirstName' },
                    { value: '2', text: 'Lastname' },
                    { value: '3', text: 'Email' },
                    { value: '4', text: 'Phone' },
                    { value: '5', text: 'Type' }
                ],
                headers: ['Account ID', 'Firstname', 'Lastname', 'Email', 'Pp_path', 'Phone', 'Type'],

                rows: [
                    ['2', 'Customer', 'One', 'customer1@gmail.com', '1755182842648.jpg', '0966558877', 'customer']
                ]
            }
        };

        let currentSection = 'bookings';
        let originalData = {};

        async function showSection(section) {
            currentSection = section;
            const sectionData = data[section];
            if (currentSection == 'services') {
                try {
                    const res = await fetch('/api/services/getAll', {
                        credentials: "include",
                    });
                    const thisServices = await res.json();
                    sectionData.rows = [] //first make storage empty
                    //loop over each service object and assign it's values to the storage
                    for (let i = 0; i < thisServices.data.length; i++) {
                        const s = thisServices.data[i];
                        sectionData.rows.push([
                            s.Id,
                            s.Shortname,
                            s.Fullname,
                            s.Description || "",
                            s.Price,
                            s.Amount,
                            s.AvailableFrom.slice(0, 10),
                            s.Type
                        ])
                    }
                    //console.log(thisServices)
                } catch (e) {
                    console.log('unable to fetch services list')
                    console.error(e)
                }
            }
            else if (currentSection == 'bookings') {
                try {
                    const res = await fetch('/api/services/getAll', {
                        credentials: "include",
                    });
                    const thisServices = await res.json();
                    sectionData.rows = [] //first make storage empty
                    //loop over each service object and assign it's values to the storage
                    for (let i = 0; i < thisServices.data.length; i++) {
                        const s = thisServices.data[i];
                        sectionData.rows.push([
                            s.Id,
                            s.Shortname,
                            s.Fullname,
                            s.Description || "",
                            s.Price,
                            s.Amount,
                            s.AvailableFrom.slice(0, 10),
                            s.Type
                        ])
                    }
                    //console.log(thisServices)
                } catch (e) {
                    console.log('unable to fetch services list')
                    console.error(e)
                }

            }
            else if (currentSection == 'accounts') {
                try {
                    const res = await fetch('/api/accounts/getAll', {
                        credentials: "include",
                    });
                    const thisAccounts = await res.json();
                    sectionData.rows = [] //first make storage empty
                    //loop over each service object and assign it's values to the storage
                    for (let i = 0; i < thisAccounts.data.length; i++) {
                        const s = thisAccounts.data[i];
                        sectionData.rows.push([
                            s.Id,
                            s.Firstname,
                            s.Lastname || '',
                            s.Email,
                            s.Pp_path || '',
                            s.Phone,
                            s.Type
                        ])
                    }
                    //console.log(thisAccounts)
                } catch (e) {
                    console.log('unable to fetch accounts list')
                    console.error(e)
                }

            }
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            //event.target.classList.add('active');

            document.getElementById('tableTitle').textContent = sectionData.title;
            document.getElementById('newBtn').textContent = sectionData.buttonText;
            document.getElementById('searchInput').placeholder = sectionData.searchPlaceholder;

            // Update dropdown options based on current section
            updateSearchDropdown(sectionData.searchFields);

            // Clear search and reset data
            document.getElementById('searchInput').value = '';
            document.getElementById('searchDropdown').value = '';


            // Store original data for filtering
            originalData[section] = [...sectionData.rows];

            renderTable(sectionData, currentSection);
        }

        function updateSearchDropdown(searchFields) {
            const dropdown = document.getElementById('searchDropdown');
            dropdown.innerHTML = searchFields.map(field =>
                `<option value="${field.value}">${field.text}</option>`
            ).join('');
        }

        function renderTable(sectionData, currentSection) {
            const thead = document.getElementById('tableHead');
            const tbody = document.getElementById('tableBody');

            thead.innerHTML = '<tr>' + sectionData.headers.map(h => `<th>${h}</th>`).join('') + '<th class="action-th">Actions</th></tr>';

            tbody.innerHTML = sectionData.rows.map(row =>
                '<tr  class="action-tr">' + row.map(cell => `<td>${cell}</td>`).join('') + `
                <td class="action-td">
                     <button class="search-btn btn-edit">View / Edit</button>
                     <button class="logout-btn btn-delete">Delete</button>
                </td > 
                </tr>`
            ).join('');

            tbody.addEventListener('click', function (event) {
                const target = event.target;
                if (target.tagName === 'BUTTON') {
                    const id = target.closest('tr').cells[0].textContent.trim();

                    if (target.classList.contains('btn-edit')) {
                        if (currentSection == 'services')
                            window.location.href = `/api/services/update/${id}`;
                        else if (currentSection == 'accounts')
                            window.location.href = `/api/accounts/update/${id}`;
                        else if (currentSection == 'bookings')
                            window.location.href = `/api/bookings/update/${id}`;
                    }
                    else if (target.classList.contains('btn-delete')) {
                        if (confirm('Are you sure you want to delete this account?')) {
                            fetch(`/accounts/${id}`, { method: 'DELETE' })
                                .then(res => {
                                    if (res.ok) {
                                        alert('Account deleted');
                                        target.closest('tr').remove();
                                    } else {
                                        alert('Failed to delete account');
                                    }
                                })
                                .catch(err => console.error(err));
                        }
                    }
                }
            });
        }

        function performSearch() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            const selectedField = document.getElementById('searchDropdown').value;
            const sectionData = data[currentSection];

            if (searchTerm === '') {
                // Show all data if search is empty
                sectionData.rows = [...originalData[currentSection]];
            } else {
                // Filter data based on search term and selected field
                sectionData.rows = originalData[currentSection].filter(row => {
                    if (selectedField === '') {
                        // Search all fields
                        return row.some(cell => cell.toLowerCase().includes(searchTerm));
                    } else {
                        // Search specific field
                        const fieldIndex = parseInt(selectedField);
                        return row[fieldIndex].toLowerCase().includes(searchTerm);
                    }
                });
            }

            renderTable(sectionData, 'bookings');
        }

        function clearSearch() {
            document.getElementById('searchInput').value = '';
            document.getElementById('searchDropdown').value = '';
            performSearch();
        }

        function addNew(e) {
            /*
            const currentSection = document.querySelector('.nav-item.active').textContent.toLowerCase().includes('services') ? 'service' :
                document.querySelector('.nav-item.active').textContent.toLowerCase().includes('bookings') ? 'booking' : 'account';
                */
            console.log(this.textContent)

            if (currentSection.includes('servic')) window.location.href = "/api/services/create";
            if (currentSection.includes('accoun')) window.location.href = "/api/accounts/create";
            if (currentSection.includes('book')) window.location.href = "/api/bookings/create";
        }

        // Initialize with bookings section
        showSection('bookings');

        //autorun method
        (async () => {
            try {
                //loading services
                const resServices = await fetch('/api/services/getAll', {
                    credentials: "include",
                });
                const services = await resServices.json();
                console.log(services.data.length)
                document.querySelector('#services').innerText = services.data.length;

                //loading accounts
                const resAccounts = await fetch('/api/accounts/getAll', {
                    credentials: "include",
                });
                const accounts = await resAccounts.json();
                console.log(accounts.data.length)
                document.querySelector('#accounts').innerText = accounts.data.length

                //loading bookings
                const resBookings = await fetch('/api/services/getAll', {
                    credentials: "include",
                });
                const bookings = await resBookings.json();
                console.log(bookings.data.length)
                document.querySelector('#bookings').innerText = services.data.length;
            } catch (e) {
                console.log('unable to fetch services list')
                console.error(e)
            }
        })();
    </script>
</body>

</html>