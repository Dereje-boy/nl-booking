<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .reset-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .reset-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .reset-header h1 {
            color: #333;
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .reset-header p {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #333;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e1e1e1;
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-group.error input {
            border-color: #e74c3c;
            box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.1);
        }

        .error-message {
            color: #e74c3c;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
        }

        .form-group.error .error-message {
            display: block;
        }

        .reset-btn {
            width: 100%;
            padding: 0.75rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .reset-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .reset-btn:active {
            transform: translateY(0);
        }

        .reset-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .success-message {
            background: #2ecc71;
            color: white;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
            display: none;
            text-align: center;
        }

        .navigation-links {
            margin-top: 1.5rem;
        }

        .nav-links {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            text-align: center;
        }

        .nav-links a {
            color: #667eea;
            text-decoration: none;
            font-size: 0.9rem;
            padding: 0.5rem;
            border-radius: 3px;
            transition: background-color 0.2s ease;
        }

        .nav-links a:hover {
            text-decoration: underline;
            background-color: rgba(102, 126, 234, 0.05);
        }

        .nav-links .primary-link {
            font-weight: 500;
            color: #333;
        }

        .divider {
            text-align: center;
            margin: 1rem 0;
            color: #ccc;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #e1e1e1;
        }

        .divider span {
            background: white;
            padding: 0 1rem;
            color: #999;
            font-size: 0.85rem;
        }

        @media (max-width: 480px) {
            .reset-container {
                padding: 1.5rem;
                margin: 1rem;
            }

            .reset-header h1 {
                font-size: 1.75rem;
            }
        }
    </style>
</head>

<body>
    <div class="reset-container">
        <div class="reset-header">
            <h1>Reset Password</h1>
            <p>Enter your email address and we'll send you a link to reset your password.</p>
        </div>

        <div class="success-message" id="successMessage">
            Password reset link has been sent to your email address. Please check your inbox.
        </div>

        <form id="resetForm" novalidate>
            <div class="form-group" id="emailGroup">
                <label for="email">Email Address</label>
                <input type="email" id="email" name="email" required placeholder="Enter your email">
                <div class="error-message" id="emailError"></div>
            </div>

            <button type="submit" class="reset-btn" id="resetBtn">
                Send Reset Link
            </button>
        </form>

        <div class="navigation-links">
            <div class="divider">
                <span>or</span>
            </div>

            <div class="nav-links">
                <a href="/login" class="primary-link">← Back to Login</a>
                <a href="/signup">Don't have an account? Sign up</a>
                <a href="/">← Back to Homepage</a>
            </div>
        </div>
    </div>

    <script>
        class ResetPasswordValidator {
            constructor() {
                this.form = document.getElementById('resetForm');
                this.emailInput = document.getElementById('email');
                this.resetBtn = document.getElementById('resetBtn');
                this.successMessage = document.getElementById('successMessage');

                this.initEventListeners();
            }

            initEventListeners() {
                this.form.addEventListener('submit', (e) => this.handleSubmit(e));
                this.emailInput.addEventListener('blur', () => this.validateEmail());
                this.emailInput.addEventListener('input', () => this.clearError('email'));
            }

            validateEmail() {
                const email = this.emailInput.value.trim();
                const emailGroup = document.getElementById('emailGroup');
                const emailError = document.getElementById('emailError');

                // Check if email is empty
                if (!email) {
                    this.showError('email', 'Email is required');
                    return false;
                }

                // Check email format
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    this.showError('email', 'Please enter a valid email address');
                    return false;
                }

                this.clearError('email');
                return true;
            }

            showError(field, message) {
                const group = document.getElementById(`${field}Group`);
                const error = document.getElementById(`${field}Error`);

                group.classList.add('error');
                error.textContent = message;
            }

            clearError(field) {
                const group = document.getElementById(`${field}Group`);
                const error = document.getElementById(`${field}Error`);

                group.classList.remove('error');
                error.textContent = '';
            }

            showSuccess() {
                this.successMessage.style.display = 'block';
                setTimeout(() => {
                    this.successMessage.style.display = 'none';
                }, 5000); // Show for 5 seconds
            }

            handleSubmit(e) {
                e.preventDefault();

                // Hide any existing success message
                this.successMessage.style.display = 'none';

                // Validate email
                const isEmailValid = this.validateEmail();

                if (isEmailValid) {
                    // Simulate password reset process
                    this.resetBtn.disabled = true;
                    this.resetBtn.textContent = 'Sending...';

                    setTimeout(() => {
                        this.resetBtn.disabled = false;
                        this.resetBtn.textContent = 'Send Reset Link';
                        this.showSuccess();

                        // In a real application, you would send the reset email
                        console.log('Password reset requested for:', this.emailInput.value);

                        // Reset form after successful submission
                        setTimeout(() => {
                            this.form.reset();
                        }, 1000);

                    }, 1500);
                }
            }
        }

        // Navigation functions
        function navigateToLogin() {
            // In a real application, these would be actual navigation
            alert('Navigating to login page...\nIn a real app, this would go to the login page');
            console.log('Navigate to: /login');
        }

        function navigateToSignup() {
            alert('Navigating to signup page...\nIn a real app, this would go to /signup');
            console.log('Navigate to: /signup');
        }

        function navigateToHome() {
            alert('Navigating to homepage...\nIn a real app, this would go to /');
            console.log('Navigate to: /');
        }

        // Initialize the validator when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new ResetPasswordValidator();
        });
    </script>
</body>

</html>